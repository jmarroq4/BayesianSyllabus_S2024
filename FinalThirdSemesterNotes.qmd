---
title: "Weeks 10-15"
---

# Week 10

- Review project details and get updates
- Discuss project 2
- Q&A Session

# Week 11

Tuesday:  Gain clarity on Tuesday for final third of semester

Thursday:  Project demonstration and presentation

Introduce Project 3


# Week 12

## Stan introduction via brms

```{r}
#| echo: TRUE
#| message: FALSE
#| warning: FALSE
#| error: FALSE
#| output: false
#| cache: false

library(brms)
library(tidyverse)

# simulate
set.seed(123)
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
data <- data.frame(x, y)

# fit
fit <- brm(y ~ x, data = data, chains = 1, iter = 100)

```

```{r}
#| echo: TRUE
#| message: FALSE
#| warning: FALSE
#| error: FALSE

# print the fit
summary(fit)
```


```{r stcode}
#| echo: TRUE
#| message: FALSE
#| warning: FALSE
#| error: FALSE
#| class-output: stan

# extract stan code from brms

writeLines(stancode(fit))
```

```{r stdata}
#| echo: TRUE
#| message: FALSE
#| warning: FALSE
#| error: FALSE
#| cache: false

# extract stan data from brms
standata(fit)
```


## Real life examples and applications - unique to Bayesian analyses

- [ ] [A new look at p-values for RCTs](http://www.stat.columbia.edu/~gelman/research/published/pval_RCTs_rev3.pdf)
- [ ] [A novel clinical trial](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7826635/)
- [ ] [Clinical nutrition research](https://pubmed.ncbi.nlm.nih.gov/37715007/)



# Week 13

We begin our final week of new material by introducing some details that will help you apply Bayesian analyses to your own research.  We will also discuss the final project and how to present your work.  Here are some broad stroke details I wish to discuss:

1.  How to apply Bayesian analyses to your own research
  a.  Ask different questions of your data
  b.  Use different priors (test, try, learn)
  c.  Use different models (distributions, link functions, etc.)
2.  How to present your work
  a.  What to include in your presentation
  b.  What details matter?
  c.  How to answer questions as they arise (post presentation)
3.  How to write up your work
  a.  What to include in your write-up
  b.  What details matter?
  c.  How do you anticipate questions and answer them in your write-up?


# Week 14

Real life examples and applications - unique to Bayesian analyses

## Julia First

1. Install Julia and Friends
  a. [Download Julia](https://julialang.org/downloads/)
  b. [Install Julia](https://julialang.org/downloads/platform/)
  c. [Install IJulia](https://quarto.org/docs/computations/julia.html#installation)
  d. [Install Stan.jl](https://github.com/StanJulia/Stan.jl)
  e. [Install Plots.jl](http://docs.juliaplots.org/latest/)
  
2.  Test your installation
  
Plot function pair (x(u), y(u)). 
See @fig-parametric for an example.

```{julia}
using Plots

plot(sin, 
     x->sin(2x), 
     0, 
     2Ï€, 
     leg=false, 
     fill=(0,:lavender))
```  
  

## Julia and Stan

```{julia}
CMDSTAN = homedir() * "/GitTemp/cmdstan/"

using StanSample, MCMCChains

binorm_model = "
  transformed data {
      matrix[2,2] Sigma;
      vector[2] mu;

      mu[1] = 0.0;
      mu[2] = 0.0;
      Sigma[1,1] = 1.0;
      Sigma[2,2] = 1.0;
      Sigma[1,2] = 0.10;
      Sigma[2,1] = 0.10;
  }
  parameters {
      vector[2] y;
  }
  model {
        y ~ multi_normal(mu, Sigma);
  }
"

sm = SampleModel("binormal", binorm_model);

rc = stan_sample(sm)

if success(rc)
  chn = read_samples(sm, :mcmcchains)
  chn |> display
end
```



```{julia}
CMDSTAN = homedir() * "/GitTemp/cmdstan/"
using CmdStan

# simulate
n = 100
x = randn(n)
y = 2*x + randn(n)

# fit
const model = "
data {
  int<lower=1> N;  // total number of observations
  vector[N] Y;  // response variable
  int<lower=1> K;  // number of population-level effects
  matrix[N, K] X;  // population-level design matrix
  int<lower=1> Kc;  // number of population-level effects after centering
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
  matrix[N, Kc] Xc;  // centered version of X without an intercept
  vector[Kc] means_X;  // column means of X before centering
  for (i in 2:K) {
    means_X[i - 1] = mean(X[, i]);
    Xc[, i - 1] = X[, i] - means_X[i - 1];
  }
}
parameters {
  vector[Kc] b;  // regression coefficients
  real Intercept;  // temporary intercept for centered predictors
  real<lower=0> sigma;  // dispersion parameter
}
transformed parameters {
  real lprior = 0;  // prior contributions to the log posterior
  lprior += student_t_lpdf(Intercept | 3, 0.2, 2.5);
  lprior += student_t_lpdf(sigma | 3, 0, 2.5)
    - 1 * student_t_lccdf(0 | 3, 0, 2.5);
}
model {
  // likelihood including constants
  if (!prior_only) {
    target += normal_id_glm_lpdf(Y | Xc, Intercept, b, sigma);
  }
  // priors including constants
  target += lprior;
}
generated quantities {
  // actual population-level intercept
  real b_Intercept = Intercept - dot_product(means_X, b);
}
"
data = Dict("N" => n, "x" => x, "y" => y)

sm = Stanmodel(name="bivmod", model=model)
rc = stan_sample(sm, model)

if success

rc = stan_sample(sm, :mcmcchains)
```

```{julia}
# print the fit
println(fit)
```

```{julia}
# extract stan code from brms
println(stancode(fit))
```

```{julia}
# extract stan data from brms
println(standata(fit))
  
```

# Week 15

Final project presentation
